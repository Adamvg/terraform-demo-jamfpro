# ref - https://medium.com/@gallaghersam95/the-best-terraform-cd-pipeline-with-github-actions-6ecbaa5f3762

name: 'Terraform setup and plan'
description: 'Setup Terraform and creates plan'
inputs:
  terraform_working_directory:
    description: 'Directory that holds Terraform code'
    required: true
  terraform_version: 
    description: 'Terraform Version'
    required: true
    default: 1.7.5
  terraform_cloud_api_token: 
    description: 'Terraform cloud token'
    required: true
  github_token: 
    description: 'GitHub token for auth'
    required: true
  pr_id:
    description: 'Pull request ID'
    required: true
  jamfpro_client_secret:
    description: 'JAMF Pro service client secret used for Terraform actions'
    required: true
  jamfpro_client_id: 
    description: 'JAMF Pro service clientID used for Terraform actions'
    required: true
  jamfpro_instance_name: 
    description: 'JAMF Pro instance name e.g for https://mycompany.jamfcloud.com , use mycompany'
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token:  ${{ inputs.terraform_cloud_api_token }}
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false

    # - id: 'auth'
    #   name: 'Remote Backend Authentication'
    #   uses: 'google-github-actions/auth@v1'
    #   with:
    #     service_account: ${{ inputs.terraform_sa }}
    #     credentials_json: ${{ inputs.google_sa_key }}

    - name: Terraform fmt
      id: fmt
      shell: bash
      run: terraform fmt -check
      working-directory: ${{ inputs.terraform_working_directory }}
      
    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.terraform_working_directory }}
      shell: bash
      run: |
        terraform init
        
    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color
      working-directory: ${{ inputs.terraform_working_directory }}
      
    - name: Terraform Plan
      id: plan
      shell: bash
      run: |
        terraform plan -no-color -out=plan.tfplan
        ls -a
      working-directory: ${{ inputs.terraform_working_directory }}


    - name: Export TF Plan
      id: export
      shell: bash
      run: |
        terraform show -no-color -json plan.tfplan > plan.json
        terraform show -no-color plan.tfplan > plan.txt
      working-directory: ${{ inputs.terraform_working_directory }}
      
    - name: Save Artifact
      id: save-artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: ${{ inputs.pr_id }}-tf-plan
        path: ${{ inputs.terraform_working_directory }}/tfplan
    
    - name: Comment Plan
      uses: actions/github-script@v7.0.1
      if: always()
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
    
          // 2. Prepare format of the comment
          const fs = require('fs');
          const planPath = '${{ env.TF_ACTIONS_WORKING_DIR }}/plan.txt';
          const planOutput = fs.readFileSync(planPath, 'utf8');
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
    
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
    
          </details>
    
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
          <details><summary>Show Plan</summary>
    
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
    
          </details>
    
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.terraform_working_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
# ref: https://sentenz.github.io/convention/convention/conventional-commits/
name: "01 - terraform speculative plan: sandbox"

on:
  push:
    branches:
      - 'feat-*'
      - 'fix-*'
      - 'docs-*'
      - 'style-*'
      - 'refactor-*'
      - 'test-*'
      - 'chore-*'
      - 'build-*'
      - 'ci-*'
      - 'perf-*'
    paths:
      - '**/*.tf'
      
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch to run speculative plan (must start with feat-, fix-, docs-, style-, refactor-, test-, chore-, build-, ci-, or perf-)'
        required: true
        default: 'feat-'

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-sandbox"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"
  PIPELINE_DEBUG: "true"
  # other env vars are set within tfcloud directly for within the tf workspace

permissions:
  contents: write
  id-token: write
  pull-requests: write
  
jobs:
  terraform-plan:
    if: >
      github.repository != 'hashicorp-education/learn-terraform-github-actions' &&
      (
        github.event_name == 'workflow_dispatch' ||
        startsWith(github.ref, 'refs/heads/feat-') ||
        startsWith(github.ref, 'refs/heads/fix-') ||
        startsWith(github.ref, 'refs/heads/docs-') ||
        startsWith(github.ref, 'refs/heads/style-') ||
        startsWith(github.ref, 'refs/heads/refactor-') ||
        startsWith(github.ref, 'refs/heads/test-') ||
        startsWith(github.ref, 'refs/heads/chore-') ||
        startsWith(github.ref, 'refs/heads/build-') ||
        startsWith(github.ref, 'refs/heads/ci-') ||
        startsWith(github.ref, 'refs/heads/perf-')
      )
    name: "Terraform Speculative Plan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        
      - name: Validate Branch Name for manual runs
        if: github.event_name == 'workflow_dispatch'
        run: |
          branch="${{ github.event.inputs.branch_name }}"
          if [[ ! "$branch" =~ ^(feat|fix|docs|style|refactor|test|chore|build|ci|perf)- ]]; then
            echo "Error: Branch name must start with 'feat-', 'fix-', 'docs-', 'style-', 'refactor-', 'test-', 'chore-', 'build-', 'ci-', or 'perf-'"
            exit 1
          fi

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Create or Update PR Comment
        uses: actions/github-script@v6
        if: always()
        env:
          PLAN: "${{ steps.plan-output.outputs.plan }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan-output.outputs.exitcode }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            } else {
              github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Terraform Plan',
                head_sha: context.sha,
                status: 'completed',
                conclusion: '${{ steps.plan-output.outputs.exitcode }}' === '0' ? 'success' : 'failure',
                output: {
                  title: 'Terraform Plan',
                  summary: output
                }
              })
            }
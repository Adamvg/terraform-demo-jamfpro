name: "02 - release and terraform plan: staging"

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - sandbox
          - staging
      target_environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      debug:
        description: 'Debug mode'
        required: false
        default: 'false'

env:
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"
  source_environment: sandbox
  target_environment: staging

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate environment inputs
        run: |
          if [[ "${{ github.event.inputs.source_environment }}" == "sandbox" && "${{ github.event.inputs.target_environment }}" == "production" ]]; then
            echo "Error: Cannot create PR from sandbox to production."
            exit 1
          fi
          if [[ "${{ github.event.inputs.source_environment }}" == "${{ github.event.inputs.target_environment }}" ]]; then
            echo "Error: Source and target environments cannot be the same."
            exit 1
          fi

  create-version-and-release:
    needs: validate-inputs
    uses: ./.github/workflows/create-version-and-release.yml
    with:
      source_environment: ${{ github.event.inputs.source_environment }}
      config_directory: "workload/terraform/jamfpro"
      debug: ${{ github.event.inputs.debug == 'true' }}

  terraform-plan:
    needs: create-version-and-release
    uses: ./.github/workflows/terraform-plan.yml
    with:
      tf_cloud_organization: "deploymenttheory"
      tf_workspace: "terraform-jamfpro-staging" 
      target_environment: ${{ github.event.inputs.target_environment }}
      debug: ${{ github.event.inputs.debug == 'true' }}
      config_directory: "workload/terraform/jamfpro"
      new_version: ${{ needs.create-version-and-release.outputs.new_version }}
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  send-notification:
    needs: [create-version-and-release, terraform-plan]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: ${{ github.event.inputs.target_environment }}
      result: ${{ needs.terraform-plan.result == 'success' && 'success' || 'failure' }}
      notification_channel: msteams
      new_version: ${{ needs.create-version-and-release.outputs.new_version }}
    secrets: inherit
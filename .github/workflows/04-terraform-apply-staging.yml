name: "04 - terraform apply: staging"

on:
  pull_request:
    types: [closed]
    branches: [staging]

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-staging"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"
  PIPELINE_DEBUG: "true"

permissions:
  contents: read
  id-token: write

jobs:
  terraform-apply:
    name: "Terraform Apply to Staging"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.1
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

  branch-cleanup:
    needs: [terraform-apply]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Get Latest Release Version
        id: get_version
        run: |
          RESPONSE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          echo "API Response: $RESPONSE"
          if [ "$(echo $RESPONSE | jq -r '.message')" = "Not Found" ]; then
            echo "No releases found. Exiting."
            exit 1
          fi
          LATEST_RELEASE=$(echo $RESPONSE | jq -r .tag_name)
          if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" = "null" ]; then
            echo "Failed to get latest release version. Exiting."
            exit 1
          fi
          echo "LATEST_RELEASE=${LATEST_RELEASE}" >> $GITHUB_ENV
          echo "Latest release version: $LATEST_RELEASE"

      - name: Set and Delete Branch
        id: set_and_delete_branch
        run: |
          BRANCH_NAME="release-${LATEST_RELEASE}"
          echo "Attempting to delete branch: ${BRANCH_NAME}"
          git push origin --delete ${BRANCH_NAME} || echo "Branch ${BRANCH_NAME} does not exist or couldn't be deleted"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Confirm deletion
        run: |
          if git ls-remote --exit-code --heads origin release-${LATEST_RELEASE}; then
            echo "Branch release-${LATEST_RELEASE} still exists. Deletion failed."
            exit 1
          else
            echo "Branch release-${LATEST_RELEASE} has been successfully deleted."
          fi

  send-notification:
    needs: [terraform-apply]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: "Staging"
      result: ${{ needs.terraform-apply.result == 'success' && 'success' || 'failure' }}
      notification_channel: msteams
    secrets: inherit
name: "aa - versioning and promotion"

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual trigger

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"

jobs:
  create-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Generate hash from Terraform configurations
        run: |
          CONFIG_HASH=$(find ${{ env.CONFIG_DIRECTORY }} -type f -name '*.tf' -exec sha256sum {} + | sha256sum | cut -c1-8)
          echo "CONFIG_HASH=$CONFIG_HASH" >> $GITHUB_ENV

      - name: Get latest version
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Increment version
        run: |
          VERSION=$(echo $LATEST_TAG | sed 's/v//' | cut -d'-' -f1)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=$((VERSION_PARTS[2]+1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH-$CONFIG_HASH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Set version output
        id: set_version
        run: echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Get current date and time
        id: current_time
        run: echo "time=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: |
            ${{ github.event_name == 'schedule' && 'This is an automated release triggered by the scheduled workflow.' || format('This release was manually triggered by @{0}.', github.actor) }}

            Release Date and Time: ${{ steps.current_time.outputs.time }}

            Configuration Hash: ${{ env.CONFIG_HASH }}
          draft: false
          prerelease: false
          files: |
            ${{ env.CONFIG_DIRECTORY }}/**/*.tf
            README.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  promote-to-staging:
    needs: create-version
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.check_changes.outputs.changes_detected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check_changes
        run: |
          git fetch origin staging
          changes=$(git diff --name-only origin/staging...promote-${{ needs.create-version.outputs.new_version }})
          if [ -n "$changes" ]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "Changes detected. Proceeding with PR creation."
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "No changes detected. Skipping PR creation."
          fi

      - name: Create promotion branch
        if: steps.check_changes.outputs.changes_detected == 'true'
        run: |
          git checkout -b promote-${{ needs.create-version.outputs.new_version }}
          git push -u origin promote-${{ needs.create-version.outputs.new_version }}

      - name: Create Pull Request to Staging
        if: steps.check_changes.outputs.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: promote-${{ needs.create-version.outputs.new_version }}
          base: staging
          title: "Promote ${{ needs.create-version.outputs.new_version }} to Staging"
          body: |
            This PR promotes the release ${{ needs.create-version.outputs.new_version }} to the Staging environment.
            
            Please review the changes and approve if everything looks correct.

  terraform-plan-staging:
    needs: promote-to-staging
    if: needs.promote-to-staging.outputs.changes_detected == 'true'
    name: "Terraform Plan for Staging"
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: "terraform-jamfpro-staging"
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          ref: promote-${{ needs.create-version.outputs.new_version }}

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Find or Create Pull Request
        id: find_or_create_pr
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = 'promote-${{ needs.create-version.outputs.new_version }}';
            
            // Try to find existing PR
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: branchName,
              base: 'staging'
            });
            
            if (prs.data.length > 0) {
              console.log('Existing PR found');
              return prs.data[0].number;
            }
            
            // If no PR exists, create one
            console.log('No existing PR found. Creating a new one.');
            const newPr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Promote ${{ needs.create-version.outputs.new_version }} to Staging`,
              head: branchName,
              base: 'staging',
              body: 'This PR was automatically created by the CI/CD pipeline to promote the latest changes to staging.'
            });
            
            return newPr.data.number;

      - name: Update PR
        if: steps.find_pr.outputs.pr_number
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.find_pr.outputs.pr_number }};
            const planStatus = '${{ steps.plan-output.outputs.plan_status }}';
            const planDetails = `
              Additions: ${{ steps.plan-output.outputs.add }}
              Changes: ${{ steps.plan-output.outputs.change }}
              Destructions: ${{ steps.plan-output.outputs.destroy }}
            `;
            
            let statusEmoji;
            switch(planStatus) {
              case 'planned':
                statusEmoji = '✅';
                break;
              case 'errored':
                statusEmoji = '❌';
                break;
              default:
                statusEmoji = '⚠️';
            }
            
            const output = `## Terraform Cloud Plan Output for Staging ${statusEmoji}
            
            ### Plan Status: ${planStatus}
            
            ### Plan Details:
            ${planDetails}
            
            ### Summary:
            \`\`\`
            Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
            \`\`\`
            
            [View Full Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
            
            ---
            
            Please review this plan carefully. If it looks good, approve the pull request to apply these changes to the staging environment.`;
            
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  send-notification:
    needs: [create-version, promote-to-staging, terraform-plan-staging]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: "Staging"
      result: ${{ needs.promote-to-staging.outputs.changes_detected == 'true' && needs.terraform-plan-staging.result == 'success' && 'success' || (needs.promote-to-staging.outputs.changes_detected == 'false' && 'skipped' || 'failure') }}
      notification_channel: msteams
    secrets: inherit
name: "aa - versioning and release"

on:
  workflow_dispatch:  # Manual trigger only

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-staging"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"

jobs:
  create-version-and-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Generate hash from Terraform configurations
        run: |
          CONFIG_HASH=$(find ${{ env.CONFIG_DIRECTORY }} -type f -name '*.tf' -exec sha256sum {} + | sha256sum | cut -c1-8)
          echo "CONFIG_HASH=$CONFIG_HASH" >> $GITHUB_ENV

      - name: Create new version
        id: set_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "v0.0.0")
          VERSION=$(echo $LATEST_TAG | sed 's/v//' | cut -d'-' -f1)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=$((VERSION_PARTS[2]+1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH-$CONFIG_HASH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and push new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: |
            This release was manually triggered by @${{ github.actor }}.
            
            Configuration Hash: ${{ env.CONFIG_HASH }}
          draft: false
          prerelease: false
          files: |
            ${{ env.CONFIG_DIRECTORY }}/**/*.tf
            README.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform-plan-staging:
    needs: create-version-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v4.1.7
        with:
          ref: staging
          fetch-depth: 0

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Create PR with Terraform Plan
        id: create_plan_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add Terraform plan for release ${{ needs.create-version-and-release.outputs.new_version }}"
          branch: tf-plan-${{ needs.create-version-and-release.outputs.new_version }}
          base: staging
          title: "Terraform Plan for Release ${{ needs.create-version-and-release.outputs.new_version }}"
          body: |
            ## Terraform Cloud Plan Output for Staging

            ### Plan Status: ${{ steps.plan-output.outputs.plan_status }}

            ### Plan Details:
            Additions: ${{ steps.plan-output.outputs.add }}
            Changes: ${{ steps.plan-output.outputs.change }}
            Destructions: ${{ steps.plan-output.outputs.destroy }}

            ### Summary:
            ```
            Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
            ```

            [View Full Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})

            Please review this plan carefully. If it looks good, approve this PR to apply these changes to the staging environment.

      - name: Check PR creation
        if: steps.create_plan_pr.outputs.pull-request-number
        run: |
          echo "Terraform Plan PR Number - ${{ steps.create_plan_pr.outputs.pull-request-number }}"
          echo "Terraform Plan PR URL - ${{ steps.create_plan_pr.outputs.pull-request-url }}"

  send-notification:
    needs: [create-version-and-release, terraform-plan-staging]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: "Staging"
      result: ${{ needs.terraform-plan-staging.result == 'success' && 'success' || 'failure' }}
      notification_channel: msteams
      new_version: ${{ needs.create-version-and-release.outputs.new_version }}
    secrets: inherit
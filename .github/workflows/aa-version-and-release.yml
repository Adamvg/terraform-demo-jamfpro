name: "aa - versioning and release"

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual trigger

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-production"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"

jobs:
  create-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Generate hash from Terraform configurations
        run: |
          CONFIG_HASH=$(find ${{ env.CONFIG_DIRECTORY }} -type f -name '*.tf' -exec sha256sum {} + | sha256sum | cut -c1-8)
          echo "CONFIG_HASH=$CONFIG_HASH" >> $GITHUB_ENV

      - name: Get latest version
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Increment version
        run: |
          VERSION=$(echo $LATEST_TAG | sed 's/v//' | cut -d'-' -f1)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=$((VERSION_PARTS[2]+1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH-$CONFIG_HASH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set version output
        id: set_version
        run: echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Get current date and time
        id: current_time
        run: echo "time=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: |
            ${{ github.event_name == 'schedule' && 'This is an automated release triggered by the scheduled workflow.' || format('This release was manually triggered by @{0}.', github.actor) }}

            Release Date and Time: ${{ steps.current_time.outputs.time }}

            Configuration Hash: ${{ env.CONFIG_HASH }}
          draft: false
          prerelease: false
          files: |
            ${{ env.CONFIG_DIRECTORY }}/**/*.tf
            README.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-to-staging:
    needs: create-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release_pr_number: ${{ steps.create_release_pr.outputs.pull-request-number }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Create Release PR to Staging
        id: create_release_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Release ${{ needs.create-version.outputs.new_version }} to Staging"
          branch: release-${{ needs.create-version.outputs.new_version }}
          base: staging
          title: "Release ${{ needs.create-version.outputs.new_version }} to Staging"
          body: |
            This PR releases version ${{ needs.create-version.outputs.new_version }} to the Staging environment.
            
            Please review the changes and approve if everything looks correct.
          delete-branch: true

      - name: Check outputs
        if: steps.create_release_pr.outputs.pull-request-number
        run: |
          echo "Pull Request Number - ${{ steps.create_release_pr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.create_release_pr.outputs.pull-request-url }}"

      - name: No PR created
        if: steps.create_release_pr.outputs.pull-request-number == ''
        run: |
          echo "No pull request was created. This might be because there are no changes between the current state and the staging branch."

  terraform-plan-staging:
    needs: [create-version, release-to-staging]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      plan_pr_number: ${{ steps.create_plan_pr.outputs.pull-request-number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Setup for Terraform plan
        run: |
          if [[ "${{ needs.release-to-staging.outputs.release_pr_number }}" != "" ]]; then
            echo "A release PR was created. Checking out the release branch."
            git checkout release-${{ needs.create-version.outputs.new_version }}
          else
            echo "No release PR was created. Using the current HEAD."
          fi

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Create Terraform Plan PR
        id: create_plan_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: tf-plan-${{ needs.create-version.outputs.new_version }}
          base: staging
          title: "Terraform Plan for Release ${{ needs.create-version.outputs.new_version }}"
          body: |
            ## Terraform Cloud Plan Output for Staging
            
            ### Plan Status: ${{ steps.plan-output.outputs.plan_status }}
            
            ### Plan Details:
            Additions: ${{ steps.plan-output.outputs.add }}
            Changes: ${{ steps.plan-output.outputs.change }}
            Destructions: ${{ steps.plan-output.outputs.destroy }}
            
            ### Summary:
            ```
            Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
            ```
            
            [View Full Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
            
            ---
            
            Please review this plan carefully. If it looks good, approve this PR to apply these changes to the staging environment.

  # cleanup:
  #   needs: [create-version, release-to-staging, terraform-plan-staging]
  #   runs-on: ubuntu-latest
  #   if: success()
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4.1.7

  #     - name: Delete release branch
  #       run: |
  #         git push origin --delete release-${{ needs.create-version.outputs.new_version }}

  send-notification:
    needs: [create-version, release-to-staging, terraform-plan-staging]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: "Staging"
      result: ${{ needs.terraform-plan-staging.result == 'success' && 'success' || 'failure' }}
      notification_channel: msteams
      new_version: ${{ needs.create-version.outputs.new_version }}
      release_pr_number: ${{ needs.release-to-staging.outputs.release_pr_number }}
      plan_pr_number: ${{ needs.terraform-plan-staging.outputs.plan_pr_number }}
    secrets: inherit